name: Workflow

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0-5 * * *'
    - cron: '0/10 6-8 * * *'
    - cron: '0/20 9-18 * * *'
    - cron: '0/30 19-20 * * *'
    - cron: '0 21-23 * * *'
  repository_dispatch:
    types: [trigger-name]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Generate json for shields.io Endpoint badge
    - name: Generate badge data
      id: badge_data
      run: |
        BADGE_VALUE=$(date -u +'%Y-%m-%d %H:%M:%SZ')
        JSON="guardian-news-last-run-badge.json"
        echo "json=$JSON" >> $GITHUB_OUTPUT
        cat <<EOF > $JSON
        {
          "schemaVersion": 1,
          "label": "last news update",
          "message": "$BADGE_VALUE",
          "color": "green"
        }
        EOF

    # Upload json from step badge_data 
    # to gist for shields.io Endpoint badge
    - name: Update gist run time badge
      uses: stellarhub/push-gist-action@v1
      with:
        token: ${{ secrets.GIST_TOKEN }}
        gist_id: "${{ vars.GIST_PERSISTANT_VARIABLE }}"
        file_path: ${{ steps.badge_data.outputs.json }}
        file_type: text

    - name: Get last fetch time
      id: get_last_fetch_time
      run: |
        # beware there may be seconds of delay 
        # to get the latest gist content
        gist_id="${{ vars.GIST_PERSISTANT_VARIABLE }}"
        gist_filename="${{ vars.GIST_LAST_GUARDIAN_FETCH }}"

        api_url="https://api.github.com/gists/$gist_id"
        raw_url=$(curl -sSL "$api_url" | jq -r ".files[\"$gist_filename\"].raw_url")

        gist_content=$(curl -sSL "$raw_url")
        echo "last=$gist_content" >> $GITHUB_OUTPUT

    - name: Fetch Guardian content
      run: |
        API_KEY=${{ secrets.GUARDIAN_KEY }} 
        URL="https://content.guardianapis.com/search"
        ORDER_BY="newest"  
        PAGE_SIZE=200

        response=$(curl -s -G \
            --data-urlencode "api-key=$API_KEY" \
            --data-urlencode "order-by=$ORDER_BY" \
            --data-urlencode "page-size=$PAGE_SIZE" \
            "$URL")
        
        # for the response by publicationDate to process oldest items first
        # using order-by seems to have problem without specifying a date
        # which makes the logic more complex
        # format it as tsv for reading in the next step
        sorted_data=$(echo "$response" | jq -r '.response.results | sort_by(.webPublicationDate) | .[] | [.webPublicationDate, .sectionName, .pillarName, .type, .webTitle, .webUrl] | @tsv')

        # save response to a file due to size limit of GITHUB_OUTPUT
        echo "$sorted_data" > response.txt

    - name: Process Guardian content
      run: |
        current_time=$(date +"%s")
        sorted_data=$(cat response.txt)

        last_fetch=${{ steps.get_last_fetch_time.outputs.last }}
        last_fetch_formatted=$(date -d "@$last_fetch" +"%Y-%m-%d %H:%M:%SZ")
        printf "Last fetched message : %s (%s)\n" "$last_fetch_formatted" "$last_fetch" 

        while IFS=$'\t' read -r webPublicationDate sectionName pillarName type webTitle webUrl; do
          pubunixtime=$(date -d "$webPublicationDate" "+%s")
          diff_minutes=$((($current_time - $pubunixtime) / 60))

          if [ "$pubunixtime" -gt "$last_fetch" ]; then
            last_fetch=$pubunixtime

            case "$type" in
            article)
              status="new article"
              TZ='Europe/London'
              format="+%d %B, %H:%M UK time"
              formatted=$(TZ=$TZ date -d "@$pubunixtime" "$format")
              formatted=${formatted/#0/}

              shorturl=$(curl -s -d "format=simple&url=$webUrl" "https://is.gd/create.php")

              tg_message=$(printf "%s\n%s/%s %s" "$formatted" "$sectionName" "$pillarName" "$shorturl")
              tg_message=$(echo "$tg_message" | sed 's/ & / n /g')

              echo "TG message : $tg_message"
              tg_response=$(curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_KEY }}/sendMessage" -d chat_id="${{ vars.TELEGRAM_CHANNEL_ID }}" -d text="$tg_message")
              ;;
            liveblog)
              status="ignore live blog"
              ;;
            crossword)
              status="ignore crossword type"
              ;;
            *)
              status="ignore unknown type"
              ;;
            esac
          else
            status="skip old message"
          fi

          printf "%s was %s minutes ago - %s\n" "$webPublicationDate" "$diff_minutes" "$status"
        done < <(echo "$sorted_data")
        echo "last=$last_fetch" >> $GITHUB_OUTPUT
        echo "$last_fetch" > ${{ vars.GIST_LAST_GUARDIAN_FETCH }}

    - name: Push file to Gist
      uses: stellarhub/push-gist-action@v1
      with:
        token: ${{ secrets.GIST_TOKEN }}
        gist_id: "${{ vars.GIST_PERSISTANT_VARIABLE }}"
        file_path: ${{ vars.GIST_LAST_GUARDIAN_FETCH }}
        file_type: text
 
